@page "/search"

<div class="flex justify-center mt-10">
    <label for="search-type" class="mb-2 text-sm font-medium text-gray-900 sr-only">Search Type</label>
    <div class="relative w-full max-w-4xl">
        <select id="search-type"
        class="absolute top-2.5 left-2.5 px-2 py-1 text-sm text-gray-900 border border-gray-300 rounded-lg bg-white focus:ring-blue-500 focus:border-blue-500"
        @bind="SearchType">
            <option value="title">Title</option>
            <option value="author">Author</option>
        </select>
        <input id="default-search"
        class="block w-full p-4 pl-32 text-sm text-gray-900 border border-gray-300 rounded-lg bg-white focus:ring-blue-500 focus:border-blue-500"
        @bind="SearchTerm"
        placeholder="Enter book title or author"
        required />
        <button class="text-white absolute right-2.5 bottom-2.5 bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2"
        @onclick="SearchBooks">
            Search
        </button>
    </div>
</div>

@if (Books == null)
{
    <div class="text-center mb-4">
        <h1 class="text-3xl font-bold">Search to find the item you are looking for!</h1>
    </div>
    <div class="flex justify-center items-center">
        <img class="mx-auto" src="Librarian.png" alt="Description" />
    </div>
}
else if (Books.Count == 0)
{
    <div class="text-center mb-4">
        <h1 class="text-3xl font-bold">No books found for @SearchTerm</h1>
    </div>
    <div class="flex justify-center items-center">
        <img class="mx-auto" src="Librarian.png" alt="Description" />
    </div>
    
}
else
{
    <div class="flex justify-center">
        <div class="grid grid-cols-4 gap-10">
            @foreach (var book in GetCurrentPageBooks())
            {
                <div class="relative m-10 flex justify-center items-center w-full max-w-xs flex-col overflow-hidden rounded-lg border border-gray-100 bg-white shadow-md">
                    <a class="relative mx-3 mt-3 flex h-60 overflow-hidden rounded-xl" href="book/@book.Id">
                        <img class="object-cover" src="@book.CoverImageUrl" alt="book cover" style="width: auto; height: auto;" />
                    </a>
                    <div class="mt-4 px-5 pb-5">
                        <a href="book/@book.Id">
                            <h5 class="text-center font-bold tracking-tight text-gray-900">@book.Title</h5>
                        </a>
                        <div class="mb-5 flex justify-center">
                            <p>
                                <span class="text-sm text-gray-500 ">Author: @string.Join(", ", book.AuthorName)</span>

                            </p>
                        </div>
                        <div class="mb-5 flex justify-center">
                            <p>
                                <span class="text-sm text-gray-500 ">Published: @string.Join(", ", book.PublishYear)</span>

                            </p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="flex justify-center">
        <!-- Previous Button -->
        <a
           class="flex items-center justify-center px-4 h-10 text-base font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700"
           @onclick="LastPage"
           disabled="@(!PreviousPageAvailable)">
            Previous
        </a>

        <!-- Next Button -->
        <a
           class="flex items-center justify-center px-4 h-10 ms-3 text-base font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700"
           @onclick="NextPage"
           disabled="@(!NextPageAvailable)">
            Next
        </a>
    </div>


}

@code {
    private string SearchTerm = string.Empty;
    private string SearchType = "title"; // Default to "title"
    private List<Book> Books;
    
    //variables for paginator
    private int Page = 1;
    private int Itemsoneachpage = 12;
    
    private bool NextPageAvailable => Page < TotalPages;
    private bool PreviousPageAvailable => Page > 1;
    private int TotalPages => (Books?.Count ?? 0 + Itemsoneachpage - 1) / Itemsoneachpage;

    private async Task SearchBooks()
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            return;
        }

        try
        {
            var client = new HttpClient();
            var response = await client.GetFromJsonAsync<OpenLibraryApiResponse>($"https://openlibrary.org/search.json?{SearchType}={Uri.EscapeDataString(SearchTerm)}");
            Books = response?.docs.Select(doc => new Book
                {
                    Id = doc.Id.Replace("/works/",""), // Each book has a unique id which is "/works/unqiuekey" removing the /works was simple solution
                    Title = doc.Title,
                    AuthorName = doc.AuthorName ?? new List<string>(),
                    PublishYear = doc.PublishYear,
                    CoverImageUrl = doc.CoverId.HasValue
                            ? $"https://covers.openlibrary.org/b/id/{doc.CoverId.Value}-L.jpg"
                            : "no_cover.jpg"
                }).ToList() ?? new List<Book>();
                //page you are on
                Page = 1;

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching books: {ex.Message}");
        }
    }
    private IEnumerable<Book> GetCurrentPageBooks()
    {
        return Books.Skip((Page - 1) * Itemsoneachpage).Take(Itemsoneachpage);
    }

    private void NextPage()
    {
        if (NextPageAvailable)
        {
            Page++;
        }
    }

    private void LastPage()
    {
        if (PreviousPageAvailable)
        {
            Page--;
        }
    }



    private class OpenLibraryApiResponse
    {
        public List<Work> docs { get; set; } = new();
    }

    private class Work {

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; } = "Untitled";

        [System.Text.Json.Serialization.JsonPropertyName("author_name")]
        public List<string> AuthorName { get; set; } = new();

        [System.Text.Json.Serialization.JsonPropertyName("cover_i")]
        public int? CoverId { get; set; }
        

        [System.Text.Json.Serialization.JsonPropertyName("first_publish_year")]
        public int PublishYear { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string Id { get; set; } = "";
    
    }


    private class Book
    {

        public string Title { get; set; } = "Untitled"; // Default to avoid null

        public List<string> AuthorName { get; set; } = new List<string>(); // Default to avoid null

        public int? CoverId { get; set; }
        public string CoverImageUrl { get; set; } = "no_cover.jpg"; // Default to avoid null

        public int PublishYear { get; set; }

        public string Id { get; set; } = ""; // set as blank so if null it will not cause errors
    }
}
