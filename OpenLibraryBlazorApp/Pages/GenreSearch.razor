@page "/genre/{subject}"
@inject HttpClient Http

@if (Books == null)
{
    <h2>No results yet. Start a search!</h2>
}
else if (Books.Count == 0)
{
    <h2>No books found for "<strong>@Subject</strong>".</h2>
}
else
{
    <div class="flex justify-center">
        <div class="grid grid-cols-4 gap-10">
            @foreach (var book in Books)
            {
                <div class="relative m-10 flex justify-center items-center w-full max-w-xs flex-col overflow-hidden rounded-lg border border-gray-100 bg-white shadow-md">
                    <a class="relative mx-3 mt-3 flex h-60 overflow-hidden rounded-xl" href="book/@book.Id">
                        <img class="object-cover" src="@book.CoverImageUrl" alt="book cover" style="width: auto; height: auto;" />
                    </a>
                    <div class="mt-4 px-5 pb-5">
                        <a href="book/@book.Id">
                            <h5 class="text-3xl font-bold text-slate-900">@book.Title</h5>
                        </a>
                        <div class="mt-2 mb-5 flex items-center justify-between">
                            <p>
                                <span class="text-3xl font-bold text-slate-900">Author: @string.Join(", ", book.AuthorName)</span>
                                <span class="text-3xl font-bold text-slate-900">Year Published: @string.Join(", ", book.PublishYear)</span>
                            </p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public string Subject { get; set; } = "love"; //love set as default subject


    private string SearchTerm = string.Empty;

    private List<Book> Books = new List<Book>();

    protected override async Task OnParametersSetAsync()
    {

        try
        {
            var client = new HttpClient();
            var response = await client.GetFromJsonAsync<OpenLibraryApiResponse>($"https://openlibrary.org/subjects/{Subject}.json");
            Books = response?.works.Select(doc => new Book
                {
                    Id = doc.Id.Replace("/works/", ""), // Each book has a unique id which is "/works/unqiuekey" removing the /works was simple solution
                    Title = doc.Title,
                    AuthorName = doc.AuthorName ?? new List<string>(),
                    PublishYear = doc.PublishYear,
                    CoverImageUrl = doc.CoverId.HasValue
                                ? $"https://covers.openlibrary.org/b/id/{doc.CoverId.Value}-L.jpg"
                                : "no_cover.jpg"
                }).ToList() ?? new List<Book>();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching books: {ex.Message}");
        }
    }

    private class OpenLibraryApiResponse
    {
        public List<Book> works { get; set; } = new();
    }

    private class Book
    {

        public string Title { get; set; } = "Untitled"; // Default to avoid null

        [System.Text.Json.Serialization.JsonPropertyName("author_name")]
        public List<string> AuthorName { get; set; } = new List<string>(); // Default to avoid null

        [System.Text.Json.Serialization.JsonPropertyName("cover_id")]
        public int? CoverId { get; set; }
        public string CoverImageUrl { get; set; } = "no_cover.jpg"; // Default to avoid null

        [System.Text.Json.Serialization.JsonPropertyName("first_publish_year")]
        public int PublishYear { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string Id { get; set; } = ""; // set as blank so if null it will not cause errors
    }
}
